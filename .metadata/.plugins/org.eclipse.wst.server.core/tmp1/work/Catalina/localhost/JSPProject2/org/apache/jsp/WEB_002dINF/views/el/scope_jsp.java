/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2023-03-21 09:08:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.el;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class scope_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>2. Servlet/JSP 내장 객체와 범위(scope)</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h1>2. Servlet/JSP 내장 객체와 범위(scope)</h1>\r\n");
      out.write("    <pre>\r\n");
      out.write("    	Servlet/JSP 에는 기본적으로 내장되어있는 4가지 객체가 존재함\r\n");
      out.write("    	\r\n");
      out.write("    	4종류의 객체는 각각 영향을 미칠 수 있는 범위가 다름.\r\n");
      out.write("    	\r\n");
      out.write("    	1. page : 현재 페이지\r\n");
      out.write("    	-> 현재 Servlet 또는 JSP에서만 사용 가능(1페이지)\r\n");
      out.write("    	\r\n");
      out.write("    	2. request : 요청 받은 페이지(Servlet/JSP)혹은 \r\n");
      out.write("    				요청을 위임받은 페이지 (Servlet/JSP)에서만 사용가능\r\n");
      out.write("    					(최소 2페이지 이상)\r\n");
      out.write("    					\r\n");
      out.write("    	3. session : 현재 사이트에 접속한 브라우저당 1개씩 생성.\r\n");
      out.write("    				브라우저가 종료되거나 session이 만료될 때까지 유지\r\n");
      out.write("    				(세션에 로그인 정보를 기록해둠\r\n");
      out.write("    					-> 브라우저가 종료되거나, 로그아웃이 되기 전까지\r\n");
      out.write("    					계속 로그인 상태가 유지됨\r\n");
      out.write("    				)\r\n");
      out.write("    						\r\n");
      out.write("    	4. application : 하나의 웹 어플리케이션 당 1개만 생성되는 객체.\r\n");
      out.write("    					-> 서버 시작 시 생성, 종료 시까지 유지\r\n");
      out.write("    					-> 누구든지(어느페이지에서든지) 사용 가능\r\n");
      out.write("    	\r\n");
      out.write("    	\r\n");
      out.write("    	*********************************\r\n");
      out.write("    	 \r\n");
      out.write("    	** 내장 객체의 우선순위 **\r\n");
      out.write("    	-> setAttribute(\"key\",value)로 내장 객체가 값을 세팅할 때\r\n");
      out.write("    		key 값이 중복되는 경우\r\n");
      out.write("    		\r\n");
      out.write("    		${key}만 작성하는 경우\r\n");
      out.write("    		범위가 작은 내장 객체가 높은 우선 순위를 갖게 되낟.\r\n");
      out.write("    		page > request > session > application\r\n");
      out.write("    </pre>\r\n");
      out.write("    \r\n");
      out.write("    <ul>\r\n");
      out.write("    	<li>\r\n");
      out.write("    		");

    			pageContext.setAttribute("pageMsg","페이지 범위입니다.");
    		
    			pageContext.setAttribute("str","page scope");
    		
      out.write("\r\n");
      out.write("    		page scope pageMsg : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageMsg}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("    		->page scope pageMsg : 페이지 범위입니다.\r\n");
      out.write("    	</li>\r\n");
      out.write("    	<li>\r\n");
      out.write("    		request scope message : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${message}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("    		->request scope message : request scope에 저장된 메세지 입니다.\r\n");
      out.write("    	</li>\r\n");
      out.write("    	<li>\r\n");
      out.write("    		session scope sessionValue : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionValue}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("    		->session scope sessionValue : 999\r\n");
      out.write("    	</li>\r\n");
      out.write("    	<li>\r\n");
      out.write("    		application scope appValue : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${appValue}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("    		->application scope appValue : 애플리케이션 범위 값\r\n");
      out.write("    	</li>\r\n");
      out.write("    </ul>\r\n");
      out.write("    <hr>\r\n");
      out.write("    <h1>우선 순위 확인 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${str}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h1>\r\n");
      out.write("    \r\n");
      out.write("    <h3>page의 str 값 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageScope.str}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h3>\r\n");
      out.write("    \r\n");
      out.write("    <h3>request의 str 값 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${requestScope.str}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h3>\r\n");
      out.write("    \r\n");
      out.write("    <h3>session의 str 값 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.str}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h3>\r\n");
      out.write("    \r\n");
      out.write("    <h3>application의 str 값 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${applicationScope.str}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h3>\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
